正则表达式:
正则表达式:
正则表达式:
-------------------------------------------------------------------------------------------------

比较好的网站:
    http://tool.oschina.net/uploads/apidocs/jquery/regexp.html
    https://www.w3cschool.cn/rxoyts/8kdxnozt.html
    https://regexper.com/#%5Cd%2B
    http://tools.jb51.net/regex/create_reg      正则表达式在线生成工具


非打印字符: 非打印字符也可以是正则表达式的组成部分。比如说:空格,换行之类的

\ 	将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符
    例如，“n”匹配字符“n”


{n}             表示 n 个字符,	正好n次
{n,m}           表示 n 至 m 个字符 , 至少n，但不超过m次
{m,}	        至少m次

a|b             匹配a或者b  举例: (P|p)ython  匹配 Python或者python

^               行的开头, 举个例子:
                        ^Python 匹配 'The code is Python'  返回 None
                        ^Python 匹配 'Python 3' 返回 'Python'
                ^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用^是，它表示"非"或"排除"的意思，常常用来剔除某个字符                        

^\d             行的开头必须是数字
$               行的结束,比如:
                        fox$ 匹配 'the aaa xxx xxx fox jump' 返回 None
                        fox$ 匹配 'the aaa xxx xxx fox'      返回 'fox'

\d$             行的结束必须是数字




.               匹配除换行符 \n 之外的任何单字符。要匹配 .  请使用 \.  比如:
                            'P.th.n' 匹配 'Python'
                            'P..hon' 匹配 'Python'

+               一次或多次,至少一个字符,要匹配 + 字符，请使用 \+ , 比如:
                runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）
                对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”

*               零次或更多次 任意个字符,包括0个, 要匹配 * 字符，请使用 \*。 比如:
                runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）

?               一次或根本不 ,表示0个或者1个字符,比如:
                                colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）

\b              匹配 字边界,
                举例: \bcorn\b 匹配 coen 返回 true
                      \bcorn\b 匹配 corner 返回 None
                \b 被称为词边界字符快捷方式

\B              \b的取反
                corn\B 匹配 corner 返回 corn
                corn\B 匹配 corn   返回 None

\n              匹配一个换行符。串行“\\”匹配“\”而“\(”则匹配“(”
\r 	            匹配一个回车符  等价于 \x0d 和 \cM
\d              匹配数字字符串,也就是 [0-9]
\D              匹配非数字字符串 也就是 [^0-9]
\s              匹配任何空白字符,比如:空格,制表符,换行符等等...也就是 [\f\n\r\t\v]
\S              匹配任何非空白字符,也就是 [^fnrtv]
\W (大)         匹配任何非单词字符,也就是 [^A-Za-z0-9_]
\w (小)         匹配包括下划线的任何单词字符,也就是 [A-Za-z0-9_]                


小例子:
[\d]{3}-[\d]{4}             匹配   866-5306
[\d]{3,4}                   匹配   333 或者 6666
[Pp]ython                   匹配   Python  或者  python
rub[ye]                     匹配   ruby    或者  rube
[abcd]                      括号其中任意一个字母
[0-9] 等同于 [0123456789]   匹配任何数字
[a-z]                       任何小写字母
[A-Z]                       任何大写字母
[A-Za-z0-9]                 任何字母+数字
[^aeiou]                    除了aeiou字母之外的所有字母
[^0-9]                      除了数字之外的字符
{1,}                        指定1次或多次,次数没有上限
[\d]{1,}                    匹配 '1600 c++ java PHP' 返回 1600
[\d]+                       匹配 '1600 xxxxxxxxx'    返回 1600
.+                          匹配 'foo\nbar' 返回 'foo'  像这样的遇到换行符\n停止,因为,正常情况下,不会匹配换行符
.+                          匹配 'foo\nbar' re.dotall 返回 'foo\nbar' 因为:当加上re.dotall时候,就可以匹配换行符\n,

re.search       仅仅返回第一个匹配,比如:re.search(r'\w','Python 3') 返回 P
                                                            re.findall 返回 : ['P','y','t','h','o','n']






re.IGNORECASE               不区分大小写

意思等同于的表达式:
+ 等同于 {1,}  意思是:1个或多个
* 等同于{0,}  意思是:0个或多个


限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。




Java 正则表达式 实例:
	
********************************************************************************************************
********************************************************************************************************
********************************************************************************************************


        String regex = "[0-9]+";
        Pattern pattern = Pattern.compile(regex);
        String string = "asdf        www.52bbbb.com          Java2s com";
        Matcher matcher = pattern.matcher(string);
        if (matcher.find() == true) {
            System.out.println("GROUP 0:" + matcher.group(0));
        }else {
            System.out.println("noooooot Find !!!!! -_-!!!");
        }

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************
                             要匹配的字符串如下:
<H1>Chapter 1 - 介绍正则表达式</H1>
<div>这是div盒子</div>
<span>这是span标签</span>
<123>这是自定义标签</123>

*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个? 就可以实现非贪婪或最小匹配
正则表达式有几种模式:
第一种:
    非贪婪模式:如果您只需要匹配开始和结束 H1 标签，下面的非贪婪表达式只匹配 <H1>
    正则表达式 : \<.*?\>
    共找到 8 处匹配：
    <H1>
    </H1>
    <div>
    </div>
    <span>
    </span>
    <123>
    </123>



第二种:
    贪婪模式:下面的表达式匹配从开始小于符号 (<) 到关闭 H1 标记的大于符号 (>) 之间的所有内容
    正则表达式 : \<.*\>
    共找到 4 处匹配：
    <H1>Chapter 1 - 介绍正则表达式</H1>
    <div>这是div盒子</div>
    <span>这是span标签</span>
    <123>这是自定义标签</123>

第三种:
    如果只想匹配开始的 H1 标签，表达式则是：
    正则表达式:   \<\w+?\>
    共找到 4 处匹配：
    <H1>
    <div>
    <span>
    <123>

PS:
   通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪心"表达式转换为"非贪心"表达式或者最小匹配
   正则表达式在线测试网站: https://c.runoob.com/front-end/854
   注意:Java的正则表达式是双\\来表示转义


********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

main方法运行{

        Pattern p = Pattern.compile("java", Pattern.CASE_INSENSITIVE);  // 不区分大小写
        String candidateString = "Java. java JAVA javA";
        Matcher matcher = p.matcher(candidateString);

        matcher.find(11);  // 起始位置,意思是从哪里开始找...
        System.out.println(matcher.group());
        System.out.println("------------- 1 -------------------");
        matcher.find();      // 接着上一个位置开始找
        System.out.println(matcher.group());
        System.out.println("--------------- 2 -----------------");


    }


********************************************************************************************************
********************************************************************************************************
********************************************************************************************************


main方法运行{

        // A group of 3 digits followed by 7 digits.
        String regex = "\\b(\\d{3})\\d{7}\\b";  // \\d匹配数字,{3}{7}加起来应该有10位数字

        // Compile the regular expression
        Pattern p = Pattern.compile(regex);
        String source = "1231234567 12345, and 9876543210";
        Matcher m = p.matcher(source);

        while (m.find()) {
            String phone = m.group(0);
            String areaCode = m.group(1);
            System.out.println("PhoneNumber is : " + phone + " Area  Code is :  " + areaCode);
        }

    }

    输出结果:
        PhoneNumber is : 1231234567 Area  Code is :  123
        PhoneNumber is : 9876543210 Area  Code is :  987


********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

main方法运行{
        String regex = "(\\d{3})(\\d{3})(\\d{4})";
        Pattern p = Pattern.compile(regex);
        String source = "1234567890, 12345,  and  9876543210";
        Matcher m = p.matcher(source);

        while(m.find()){
            System.out.println("Phone: " + m.group() + ", Formatted Phone:  ("
                    + m.group(1) + ") " + m.group(2) + "-" + m.group(3));
        }
    }

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

https://c.runoob.com/front-end/854 
网站测试:


正则表达式正向选择:
Windows(?=95|98|NT|2000)  匹配 Windows2000 返回 Windows

正则表达式反向选择:
Windows(?!95|98|NT|2000)  匹配 Windows2333 返回 Windows

(A.*?F)                   匹配 ABCDEFG ABCDEFG ABCDEFG 返回 :
                                                            共找到 3 处匹配：
                                                            ABCDEF
                                                            ABCDEF
                                                            ABCDEF



详情: http://tool.oschina.net/uploads/apidocs/jquery/regexp.html

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

var str = "Is is the cost of of gasoline going up up";
var patt1 = /\b([a-z]+) \1\b/ig;
document.write(str.match(patt1));

正则表达式后面的全局标记 g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配
表达式的结尾处的不区分大小写 i 标记指定不区分大小写

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

JavaScript 的 正则写法:

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>菜鸟教程(runoob.com)</title>
</head>
<body>
BCDEF 或者 CDE	
	<br><br>
<script>
var str = "ABCDEFG ABCDEFG ABCDEFG";
var patt1 = /(A.*?F)/;
arr = str.match(patt1);
for (var i = 0; i < arr.length ; i++) {
	document.write("<br>-------------------<br>");
    document.write(arr[i]);
}
</script>
</body>
</html>

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

    @Test
    public void Test() {
        String phonrNul = "我的电话号码是123456789 , 地方north of school , 我的另外一个号码是54321";
        Pattern compile = Pattern.compile("\\d+");
        Matcher matcher = compile.matcher(phonrNul);
        System.out.println(matcher);
        while(matcher.find()){
            System.out.println("lllllllllll:==>  " + matcher.group(0));
//            System.out.println("wwwwwwwwwww:{}" + matcher.group(1));
        }
    }

********************************************************************************************************
********************************************************************************************************
********************************************************************************************************

import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class A {
    public static void main(String[] args) {
        String inputLine = "Adams,John Quincy";
        Pattern r = Pattern.compile("(.*),(.*)");
        Matcher m = r.matcher(inputLine);
        if (!m.matches()) {
            throw new IllegalArgumentException("Bad Input");
        }
        // 分组0得到的是整个原字符串
        for (int i = 0; i < m.groupCount() + 1; i++) {
            System.out.println("分组" + i + ":" + m.group(i));
        }
    }
}

/*
输出：

分组0:Adams,John Quincy
分组1:Adams
分组2:John Quincy
*/

PS:
    匹配条件 换成 Pattern r = Pattern.compile(".*,.*"); 有新发现
    输出: 分组0:Adams,John Quincy


********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************



********************************************************************************************************
********************************************************************************************************
********************************************************************************************************












































































表达式全集 链接 : http://tool.oschina.net/uploads/apidocs/jquery/regexp.html
    字符 	                                            描述
\ 	            将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。串行“\\”匹配“\”而“\(”则匹配“(”。
^ 	            匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。
$ 	            匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。
* 	            匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}
+ 	            匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
? 	            匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。
{n} 	        n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
{n,} 	        n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
{n,m} 	        m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。
?   	        当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
.   	        匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.|\n)”的模式。
(pattern)   	匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。
(?:pattern) 	匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
(?=pattern) 	正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
(?!pattern) 	正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始
(?<=pattern) 	反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
(?<!pattern) 	反向否定预查，与正向否定预查类拟，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。
x|y 	        匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。
[xyz] 	        字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。
[^xyz] 	        负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。
[a-z] 	        字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。
[^a-z] 	        负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。
\b 	            匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
\B           	匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
\cx 	        匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。
\d 	            匹配一个数字字符。等价于[0-9]。
\D 	            匹配一个非数字字符。等价于[^0-9]。
\f 	            匹配一个换页符。等价于\x0c和\cL。
\n 	            匹配一个换行符。等价于\x0a和\cJ。
\r 	            匹配一个回车符。等价于\x0d和\cM。
\s 	            匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。
\S 	            匹配任何非空白字符。等价于[^ \f\n\r\t\v]。
\t 	            匹配一个制表符。等价于\x09和\cI。
\v 	            匹配一个垂直制表符。等价于\x0b和\cK。
\w 	            匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。
\W 	            匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。
\xn 	        匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&1”。正则表达式中可以使用ASCII编码。.
\num 	        匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。
\n 	            标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。
\nm         	标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。
\nml        	如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。
\un         	匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。

常用正则表达式
用户名                  	/^[a-z0-9_-]{3,16}$/
密码                    	/^[a-z0-9_-]{6,18}$/
十六进制值                   /^#?([a-f0-9]{6}|[a-f0-9]{3})$/
电子邮箱 	                 /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/
                            /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/
URL 	                     /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/
IP 地址 	                 /((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/
                             /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
HTML 标签                     /^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/
删除代码\\注释 	              (?<!http:|\S)//.*$
Unicode编码中的汉字范围        /^[\u2E80-\u9FFF]+$/



