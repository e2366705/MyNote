*****************************************************************************
spring 笔记:
commons-logging-1.2.jar  这个包是必备的!!!!

控制反转就是对对象控制权的转移,以前由我们创建对象,现在有了spring,就让spring帮我们创建对象


Spring 默认是无参构造方法创建对象

Spring 对象的生命周期 (init初始化方法 , 销毁方法): https://www.bilibili.com/video/av40807069/?p=20  (可有可无)
https://www.bilibili.com/video/av40807069/?p=23   spring 设值注入   

拜托讲解课程的老师直接讲最重要,最优的解决方案,
https://www.bilibili.com/video/av40807069/?p=31   spring自动注入 : 
https://www.bilibili.com/video/av40807069/?p=34   spring包含多个xml配置文件 
https://www.bilibili.com/video/av40807069/?p=35   spring使用注解的方式
*****************************************************************************
在eclipse中(j2ee版本),输出语句 syst(按下回车), 比syso更加好使
*****************************************************************************
泛型: 是一种未知的数据类型,当我们不知道使用什么数据类型的时候,可以使用泛型
ArrayList源码,就是用的泛型
使用泛型的好处:
	避免了类型传唤的麻烦,储存的是什么类型,取出的就是什么类型
	把运行期异常(代码运行之后抛出的异常) ,提升到了编译期(写代码时候会报错)
弊端:
	泛型是什么类型,只能存储什么类型的数据		 
*****************************************************************************
Set : 无序不可重复 (无索引)  ==> 继承于 Collection
	hashset:无序存放
	TreeSet:有序存放
List: 有序可重复            ==> 继承于 Collection
	ArrayList => 数组实现
	Vector() 线程安全的,同步处理 (ArrayList相反)
	Linked list => 链表实现
map: 存放一堆值,键值对	
	HashMap: 新的类,异步处理,非线程安全,允许有null
	HashTable:旧的类,同步处理,不允许有null
	TreeMap:有序排列,按key排序,






java.util.ArrayList
数组结构(array):
查询快,增删慢
	查询快是因为,数组地址是连续的,通过元素索引查询
	增删慢是因为,数组长度固定,若是想要增加或者删除一个元素,就必须创建一个新数组,然后把原数组的数据复制过来
	然后原数组在内存中被销毁(java垃圾回收机制)

链表结构(linked list) :
	查询慢,增删快
		查询慢是因为,链表中的结构不是连续的,每次查询都得从头开始
		增删快是因为,增删一个元素对链表整体结构没有影响
*****************************************************************************
java中的 接口:
接口定义了某一批类必须遵循的规范,不关心具体实现细节,接口规定这些类里必须提供某些方法
接口是被继承,被实现的,所以修饰符一般用public (注意:不能用private或者protacted修饰接口)

继承父类实现接口的语法为:
[修饰符] class 类名 extend 父类 implements 接口1,接口2...{
	注意:如果继承了抽象类,需要实现继承的抽象方法;需要实现接口中的抽象方法
}
*****************************************************************************
抽象类:
某个父类只是知道子类应该包含怎样的方法
但是无法准确知道这些子类如何实现这些方法
抽象类约束子类必须有哪些方法,而并不关注子类如何去实现
抽象方法,没有方法体,以分号结束
*****************************************************************************
java 多态:
继承是多态的基础

最基础的多态: Cat()和Dog()都继承自Anmail类,所以可以形成多态
Animal an = new Anmial():  父类的引用是指向本类对象
Anmail cat = new cat();    父类的引用是指向子类对象
Anmail dog = new Dog();
*****************************************************************************
equals : 比较的是对象的引用是否指向同一块内存地址
*****************************************************************************
super关键字:
在对象内部使用,代表父类对象
比如:访问父类的属性 super.age
		 访问父类的方法 super.eat();
*****************************************************************************
final:最终的意思
final修饰类 => 该类不允许被继承
final修饰方法 => 该方法不允许被覆盖(重写)
final修饰属性 => 类初始化必须有值 or 构造方法中赋值
*****************************************************************************
方法的重写:
	public static void main(String[] args) {
		cat cattttt = new cat();
		cattttt.eat();
		
	}
}
class Animall{
	public void eat() {
		System.out.println("animal is eat");
	}
}

class cat extends Animall{
	public void eat() {   //这个方法删除也是可以的
		System.out.println("cat is eat....");
	}
}
*****************************************************************************
	public static void main(String[] args) {
		System.out.println("22222222222222222222");
		u.echo("wwwwwwwwwwwwwwwww");
	}
	
	// 必须加上static
	static void sdsdsd() {
		sdsdsd();
	}
	
	//必须使用双引号
	syenm .out.print('kasdfbgvi')
	
	
	student sd = new student();
	//这里的sd 不是对象 , 是对象 new student 在堆内存中的引用
	// 或者说,sd是引用,不是对象
	// new student 是对象/实例
	
	面向对象 三大特征:
		封装 => 提高访问的安全性
			所有属性私有化,使用private(私有)关键字进行修饰,修饰之后所有的数据只能在本类中使用
		继承
		多态


static关键字怎么调用? => 类名.方法名(实参)
没有static关键字怎么调用? => 引用.方法名(实参)

构造方法不能写void(int,string同理)
构造方法必须和类名保持一致
	public static void main(String[] args) {
		person ppPerson = new person();
	}
}

class person{	
	public person() {
		System.out.println("构造方法");
	}
}
*****************************************************************************
eclipse 设置单个项目的编码方式: 项目右键 -> resource -> 选择utf-8就可以了
*****************************************************************************
Maven :
Group ID相当于一个组织，而Artifact ID相当于这个组织下的一个具体项目

*****************************************************************************
junit.Test 居然可以同时运行2个测试!!!!!!
*****************************************************************************

查看 java 安装路径:
打开cmd -> 输入:where java -> 回车

*****************************************************************************

static 在类加载的时候就已经进行了初始化,或者执行了相关的代码(static静态代码块)
比构造方法还要提前一步

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

*****************************************************************************

