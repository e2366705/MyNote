需要问老师的:

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

    java bean 到底什么概念????

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

    int类型是继承Object类吗?        
    （1）在Java中是使用泛型来约束HashMap中的key和value的类型的，
    即HashMap<K, V>；而泛型在Java的规定中必须是对象Object类型的，
    也就是说HashMap<K, V>可以理解为HashMap<Object,Object>，很显然基本数据类型不是Object类型的，
    因此不能作为键值，只能是引用类型。虽然我们在HashMap中可以这样添加数据：“map.put(1, “Java”)；”，
    但实际上是将其中的key值1进行了自动装箱操作，变为了Integer类型。

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************


问题:为什么会报错
    class Aaa{
    int iii;
    public void Sss(){
        int bbb;
        System.out.println(bbb + 1);
    }
}

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

java 获取执行java文件目录


*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

为什么匹配出来只有两个? 正则表达式测试网站都测试好几个的

https://c.runoob.com/front-end/854

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>菜鸟教程(runoob.com)</title>
</head>
<body>
BCDEF 或者 CDE	
	<br><br>
<script>
var str = "ABCDEFG ABCDEFG ABCDEFG ABCDEFG ABCDEFG";
var patt1 = /(B.+?E)/;
arr = str.match(patt1);
document.write(arr);
document.write("<br>********************************");
for (var i = 0; i < arr.length ; i++) {
	document.write("<br>-------------------<br>");
    document.write(arr[i]);

}
</script>

</body>
</html>


已经解决!!!
        原来 g跟没有g的区别了，g代表全局搜索
解决方案: 末尾加上g        
        var patt1 = /(B.+?E)/g;


*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

为什么匹配出来只有两个? 正则表达式测试网站都测试好几个的

    @Test
    public void Test() {
        String phonrNul = "我的电话号码是123456789 , 地方north of school , 我的另外一个号码是54321";
        Pattern compile = Pattern.compile("\\d+");
        Matcher matcher = compile.matcher(phonrNul);
        System.out.println(matcher);
        if(matcher.find()){
            System.out.println("lllllllllll:==>  " + matcher.group());
            System.out.println("wwwwwwwwwww:{}" + matcher.group(1));
        }
    }

    已经解决:
            if 换成 while , 循环遍历输出!

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************


addEventListener 关于 this 怎么获取

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

序列化 是什么

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

        char c = 89;
        System.out.println(c);
        输出 : Y

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

什么是java序列化，如何实现java序列化？ 


*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

spring中为什么要使用IOC, 有什么好处???
    https://www.zhihu.com/question/23277575   [ 知乎Q: Spring IoC有什么好处呢 ]



内部类,匿名内部类

baidu : java比较难懂的概念
https://www.zhihu.com/question/20794107


学习java应该如何理解反射?
    https://www.zhihu.com/question/24304289

有关于Spring的:
    https://www.cnblogs.com/szlbm/p/5512931.html

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************




什么是面向切面编程 ???   
AOP ??? [ AOP为Aspect Oriented Programming的缩写，意为：面向切面编程 ]
AOC ???
IOC ???
bean ???
动态代理 ???
控制反转 ??? [ 控制反转（Inversion of Control，缩写为IoC） ]
依赖注入 ???
代理模式 ???

堆 ???
栈 ???
闭包 ???

为什么说 String 类型长度不可以变化???
为什么说 String 不可以改变???

        String sss = "AAA";
        sss = "skjarhbgikaujw";
        System.out.println(sss);


以及怎么使用 log4j


JavaScript的 null === undefined

https://www.zhihu.com/question/48427693?sort=created


IoC：说直白点，就是通过配置文件（XML或.properties）指定需要实例化的JAVA类（类名的完整字符串）， 
包括该JAVA类的一组初始化值，然后我们在代码中加载该配置文件，然后通过 .getBean() 函数就可以得到一个该JAVA类的对象，
并且该对象已经根据配置文件中指定的属性值进行了初始化


就我了解到的关于spring的东西并不多，现在还是停留在会用的阶段，但是我觉得spring框架就是一个容器，
这个容器最主要的作用就是创建对象，以前我们创建对象时通过new关键字，现在不需要这么麻烦了，
只需要找到这个容器就可以找到你需要的对象，其实就是一个factory，这个工厂可以提供很多我们需要的对象，
我们只需要知道对象对应的名字就行了，至于其他关于spring更多高深的东西就不是很清楚了

spring AOP:
    http://how2j.cn/k/spring/spring-aop/89.html



AOP 即 Aspect Oriented Program 面向切面编程
首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能
所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务
所谓的周边功能，比如性能统计，日志，事务管理等等


Springboot就是个简单的maven 项目






别一说项目就spring，你真的懂spring么？
    https://zhuanlan.zhihu.com/p/53019001

zhihu 搜索 spring    


servlet的本质是什么，它是如何工作的?
    https://www.zhihu.com/question/21416727







Java中字符流和字节流到底有什么区别！！！

stream结尾都是字节流，reader和writer结尾都是字符流
两者的区别就是读写的时候一个是按字节读写，一个是按字符
实际使用通常差不多。
在读写文件需要对内容按行处理，比如比较特定字符，处理某一行数据的时候一般会选择字符流。
只是读写文件，和文件内容无关的，一般选择字节流


InputStream 和OutputStream,两个是为字节流设计的,主要用来处理字节或二进制对象,
Reader和 Writer.两个是为字符流（一个字符占两个字节）设计的,主要用来处理字符或字符串.
 如果是音频文件、图片、歌曲，就用字节流好点，
如果是关系到中文（文本）的，用字符流好点

字节流可用于任何类型的对象，包括二进制对象，而字符流只能处理字符或者字符串
 字节流提供了处理任何类型的IO操作的功能，但它不能直接处理Unicode字符，而字符流就可以

 如果一个程序频繁对一个资源进行IO操作，效率会非常低。此时，通过缓冲区，
 先把需要操作的数据暂时放入内存中，以后直接从内存中读取数据，则可以避免多次的IO操作，提高效率

真正存储和传输数据时都是以字节为单位的，字符只是存在与内存当中的，所以，字节流适用范围更为宽广

区别：
1、字节流在操作的时候本身是不会用到缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是使用到缓冲区的
2、字节流在操作文件时，即使不关闭资源（close方法），文件也能输出，但是如果字符流不使用close方法的话，则不会输出任何内容，
说明字符流用的是缓冲区，并且可以使用flush方法强制进行刷新缓冲区，这时才能在不close的情况下输出内容


如果要java程序实现一个拷贝功能，应该选用字节流进行操作（可能拷贝的是图片），并且采用边读边写的方式（节省内存）
https://blog.csdn.net/u012843873/article/details/76889624





--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 
--- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 --- web 案例 



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************


<html>
<head>
    <meta charset="UTF-8">
    <title>搜索框的制作</title>
    <link rel="stylesheet" type="text/css" href="css/index.css" />
    <style type="text/css">
        * {
            margin: 0;
            padding: 0;
            text-decoration: none;
            list-style-type: none;
        }

        .www{
            /*position: absolute;*/
            /*top: 0;*/
        }
        .nav {
            background: red;
            overflow: hidden;
            position: relative;
            margin: auto;
            width: 70%;
        }

        .nav .left {
            width: 100px;
            line-height: 50px;
            background: red;
            text-align: center;
            /*position: absolute;*/
        }

        .nav .mid {
            height: 50px;
            position: absolute;
            left: 100px;
            top: 0;
            right: 100px;
        }

        .nav .mid input {
            width: 100%;
            height: 70%;
            outline: none;
            border: none;
            margin-top: 7px;
            border-radius: 200px;
            padding-left: 20px;
            padding-right: 20px;
        }

        .nav .right {
            top: 0;
            right: 0;
            width: 100px;
            background: red;
            line-height: 50px;
            position: absolute;
            text-align: center;
        }
    </style>
</head>

<body>
<div class="www">
    <div class="nav">
        <div class="left">二手东</div>
        <div class="mid"><input type="" name="" id="" value="" /></div>
        <div class="right">登陆</div>
    </div>
</div>


<div class="QQ">
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
    <p>afeeadwsfweffwefwefwef</p>
</div>

</body>

</html>

*******************************************************************************************
*******************************************************************************************
*******************************************************************************************

Q: 直接new 和 通过反射来获取对象有什么区别呢???
-------------------------------------------------------
package com.baidu;
public class A {
    public static void main(String[] args) throws ClassNotFoundException {

        Iphone iphone = new Iphone();
        Class clazz1 = iphone.getClass();
        System.out.println(clazz1);

        // 反射 获取对象
        Class clazz2 = Class.forName("com.baidu.Iphone");
        System.out.println(clazz2);
    }
}


class Iphone{
    public Iphone(){

    }
}


*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************



