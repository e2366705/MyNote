MySQL 坑: 
---------- 1 ------------
values ("11111" , "22222"); 后面的不能用`111`(反引号) , 必须用双引号""
use `example`;
INSERT into example (`username`,`password`) values ("11111" , "22222");

---------- 2 ------------
最后的 end 一定要加上 ; (分号,这样表示结束)
create PROCEDURE insert_5()
BEGIN
	DECLARE i int;
	set i = 1;
	WHILE i < 5 DO
		insert into `example`(username,password) values(concat("UU",i),concat("PWD",i));
		set i = i+1;
END WHILE;
END;

call insert_5();

---------- 3 ------------
创建表之前,必须加上 use aaa; 来指定在哪个数据库创建表

------------------------------------  坑  -------------------------------------








------------------------如何用命令行新建一个完整的数据库并且包含数据
create database 数据库名; 
	
use `aaa`;	


// 创建表
CREATE TABLE IF NOT EXISTS `table1`(      --->(注释:)
   `tableID` INT UNSIGNED AUTO_INCREMENT, --->(int类型,无符号,自增)
   `username` VARCHAR(100) NOT NULL,      --->(varchar不解释 带not null,不能为空值)
   `password` VARCHAR(40) ,               --->(没有设置not null说明可以为空)
   PRIMARY KEY ( `tableID` )            --->(PRIMARY KEY关键字用于定义列为主键)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;      --->(ENGINE 设置存储引擎，CHARSET 设置编码)

---------------------- 例如  -------------------------------
CREATE TABLE IF NOT EXISTS `user`( 
`id` int(20) unsigned not null DEFAULT 0,
`money` DECIMAL(20,2) NOT NULL DEFAULT '0.00',
`username` VARCHAR(100) not null DEFAULT '', =>默认为''(不要为NULL,会影响性能)
`password` VARCHAR(40)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


---插入insert数据:
insert into table1(username,password) values('HUAWEI','mate20');
insert into table1(username,password) values('APPLE','IPHONE_5S');
insert into table1(username,password) values('OPPO','R11');

------------------------------------------------------------------------------
		  
展示所有的数据库
show databases;

use 某个数据库(aaa)
use aaa;

展示所有的数据表
show tables;

展示表中所有数据
select * from user;

insert 插入数据(两种方式)
insert into user(username,password) values('HUAWEI','mate20');
INSERT into users VALUES ('AAA','BBB','CCC');

查看当前库所有表:
show tables;

查看指定数据库的表:
show tables from 数据库名

查看表的数据结构:
desc 表名

查看服务器的版本:
select version();

-------------------------------删除操作-----------------------------------
删除表中某项数据
delete from user where password = '123123123';

清空表中全部数据，不写日志，不可恢复，速度极快
truncate table 表名;
 
清空全部数据，写日志，数据可恢复，速度慢
delete from 表名

删除数据库:
drop database <数据库名>;

删除数据表;
drop TABLE student;

#删除倒数第几行数据                                            
delete from text001 order by id desc limit 66


-------------------------------删除操作-----------------------------------

          UPDATE 更新表中某项数据
UPDATE runoob_tbl SET runoob_title='学习 C++' WHERE runoob_id=3;


             多种排序测试用
insert into user(username,password) VALUES('aaa','999');
insert into user(username,password) VALUES('bbb','555');
insert into user(username,password) VALUES('ccc','333');      

                                                           



mysql 去掉重复的:
SELECT DISTINCT username FROM same;


mysql CONCAT 表示链接字符串
SELECT CONCAT("aaa",100,"---") as result ; => 输出: aaa100---

模糊匹配 模糊查询: (包含66的数据, )
%是占位符 任意多个字符,包含0个字符
_ 任意单个字符
\ 是转义符   \_ => _
SELECT  * FROM same WHERE username LIKE '__e_a'; => 第三个字符为e,最后一个是a
SELECT  * FROM same WHERE username LIKE '%66%';
选择满足其中一项:
select * from same where username in ('a' , 'b' , 'c');
筛选出值为null的一项(id=null这种写法是错误的,同理:is NOT NULL 不为空)
select * from same where username id is null ;

安全等于 : <=> 既可以用于判断 null 也可以用于<=>1200(数字)

NOT BETWEEN 100 AND 200 不在100到200之间

IFNULL(CONNECTION,0) 如果是NULL值,改为0

mysql 去掉空格 去掉制定字符串
mysql 指定字符填充字符长度
替换字符串

mysql的函数:
四舍五入:
向上取整 

求和:
SELECT SUM(`username`) FROM same;


-----------------------------------   MySQL 约束 Start -------------------------------------
MySQL 主键(PRIMARY KEY 不能重复,不能为null):
CREATE TABLE users2(
id int,
PASSWORD VARCHAR(66),
PRIMARY KEY(id,PASSWORD)
);
联合主键:多个主键,加起来不一样也是可以的


MySQL 自增 auto_increment:
CREATE TABLE user3(
id int PRIMARY KEY auto_increment,
PASSWORD VARCHAR(66)
);

ALTER TABLE user3 add PRIMARY KEY(id);         添加 MySQL 主键 约束:(注意:执行这句代码时候,会报错,原因是原来的字段都是null值,所以设置不成功,添加不一样的数据,再执行这句代码即可)
ALTER TABLE user3 DROP PRIMARY KEY;            删除 MySQL 主键 约束
ALTER TABLE user3 MODIFY id int PRIMARY KEY;   修改字段属性

修改字段名称和属性：
-- 将test字段改为test1
-- ALTER TABLE 表名   CHANGE 原字段名 新字段名 字段类型       约束条件
   ALTER TABLE user10 CHANGE test      test1    CHAR(32)   NOT NULL DEFAULT '123';

--  给age添加默认值
	ALTER TABLE user11 ALTER age SET DEFAUTL 18;

--  添加一个字段
	ALTER TABLE user11 ADD email VARCHAR(50);

--  给email添加默认值
	ALTER TABLE user11 ALTER email SET DEFAULT 'a@a.com';


唯一约束:
ALTER TABLE user3 add unique(username);    约束该字段的值不可以重复(insert时候,组合在一起不重复就ok)

非空约束: 就是 not null (没啥好说的.....)
默认约束: default 2333 就是当我们插入字段值的时候,如果没有传值,就会使用默认值

PRIMARY KEY不可空不可重复，在一个表里可以定义联合主键；简单的说, primary key = unique + not null
null 和 '' 是不一样的!!
null 不等于 ''





外键约束:涉及两个表(主表+副表)
*1 主表(父表) class 中没有的数据值,在附表(子表)中,是不可以使用的
*2 主表中的记录被父表引用,是不可以被删除的
CREATE TABLE class(
id INT ,
name VARCHAR(66)
);

CREATE TABLE student(
id int,
name VARCHAR(66),
class_id int,
FOREIGN KEY(class_id) REFERENCES class(id)  ==> student表中class_id的值,必须来自class表中的id
);

						词汇:
						foreign key 外键
						references 参考
这句代码翻译过来就是:
FOREIGN KEY(class_id) REFERENCES class(id) 
外键 class_id(本表) 的值,参考class表中的id的值

数据库的三大设计范式:
https://www.bilibili.com/video/av39807944/?p=16   ==> 这个教程非常不错 (建表详细化)
https://www.bilibili.com/video/av39807944/?p=17   ==> 拆表 (第二范式)

select distinct username from user;    排除重复的
select * from score where username in ('aaa','bbb','ccc');  查询符合条件(aaa或者bbb或者ccc)的项目
select * from student where class='12306' or sex='女';    MySQL或者查询
select * from student order by class desc;   MySQL降序查询
select * from score order by cno asc , password desc   cno升序 , password降序
select count(*) from student where class='2333';       统计符合条件的数量
MySQL查询最高分----> 语句太长,懒得写了,用时再百度吧...

多表查询:select sname,cno,degree from student,score where student.sno = score.sno;
		 
		 select 
		 	sname,cname,degree from student,course,score 
		 where
		 	student.sno = score.sno 
		 and
		 	course.cno = score.cno;

group by : 排除重复的,筛选出不同的
SELECT PASSWORD FROM user3 GROUP BY `PASSWORD`;		 	
-----------------------------------   MySQL 约束 End -------------------------------------

