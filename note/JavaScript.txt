JavaScript三元运算符:
var b = 5;
(b == 5) ? a = "true" : a = "false";
********************************************************************************
JavaScript遍历节点元素,并且绑定点击事件
var list=document.getElementsByClassName('li_new');
for(var i in list)
{
	list[i].onmouseover=grayBack;
	list[i].onmouseout=noGrayBack;
}

********************************************************************************
使用JavaScript动态改变DOM节点属性:
<a href="#" target="_self" id="test">测试</a>
document.getElementById("test").attributes["target"].nodeValue="_blank";

JavaScript DOM setAttribute() 方法:
document.getElementsByTagName("INPUT")[0].setAttribute("type","button");


********************************************************************************
用JavaScript 将后台返回的string数据,解析成JSON数据:
var index_page_json_data = JSON.parse(xhr.responseText),
xhr.responseText ==> 是string类型
然后呢??
转换成json数据之后,怎么根据键(或者是值) 取出相对应的值(键)呢?
用:
index_page_json_data['2019_01_11_15_30_21']); ==> 根据键 取出 值
然后呢??
console.log(index_page_json_data);  ==> 输出: {2019_01_11_19_53_07: "自定义模版2333"}
然后...怎么遍历呢? [遍历json]
for (var key in index_page_json_data) {
	console.log(key + "==>" + index_page_json_data[key]);
}
********************************************************************************
JavaScript根据节点名字(a,span,li,div,img)获取节点 ==> 返回的是list集合
document.getElementsByTagName('a'));
********************************************************************************
JavaScript 分割字符串:
var str="How are you doing today?";
var n=str.split(" ");
********************************************************************************
JavaScript:
记住:
当你要引入外部 js 文件时候,一定要把<script></script>放在body下面,
不然bug多  
<script  type="text/javascript"  src="../js/upload_title_and_code.js"></script>
../css/index.css 表示从根目录开始引入
********************************************************************************
JavaScript Format :
var formData = new FormData();
var myfile = '123';
formData.append('username', myfile);  // 添加自定义数据
document.write(formData.get('username'))
********************************************************************************
JavaScript查看是否包含某个数据:
var str ="abc";
if(str.search("bc")!=-1){}
********************************************************************************
JavaScript不能从外面调用函数里面的变量(因为是私有变量):
(实在是想调用 , return数据)
function dfasfasdf() {
    var AAA = 10;
}
console.log(AAA);
********************************************************************************
JavaScript设置自定义属性:
   // 创建 a 标签 class='add_screenshots'
   var add_screenshots_a = document.createElement('a');  => 创建一个a标签
   add_screenshots_a.className = 'add_screenshots';  => 设置classname名字
   add_screenshots_a.innerHTML = '添加截图';
   add_screenshots_a.setAttribute("onclick", "dddd(this)");  => 动态绑定点击事件dddd(this)
	 
	 function dddd(thisss){
    console.log(thisss.innerHTML);  => 这个元素的 innerHTML
		console.log(thisss.previousSibling); => 这个节点元素的 上一个同类节点(object类型)
		console.log(thisss.previousSibling.innerHTML); =>上一个同类节点的 innerHTML
		console.log(thisss.getAttribute('class')); => 获取名为'class' 的属性值 (string类型)
}
	 
********************************************************************************
JavaScript获取元素的绝对位置(相对于父元素)
var self = document.getElementById("eID");
var left = self.getBoundingClientRect().left + document.documentElement.scrollLeft;
var top = self.getBoundingClientRect().top + document.documentElement.scrollTop + self.offsetHeight;

********************************************************************************
JavaScript 定位到某个位置:
document.getElementById("hhh").onclick = function () {
	//scrollTo() 方法可把内容滚动到指定的坐标
	window.scrollTo(0, 10000);
}

********************************************************************************
JavaScript 刷新:
 window.location.reload();
********************************************************************************
 //睡眠 暂停 
 function sleep(d){
  for(var t = Date.now();Date.now() - t <= d;);
}
sleep(5000); //当前方法暂停5秒
********************************************************************************
document.getElementById("myBtn").onclick=function(){displayDate()};
********************************************************************************
JavaScript:
获取 input 值是.value
赋值是.innerHTML
document.getElementById('title_input').value
document.getElementById('title_input').innerHTML

按照索引取值:
 console.log(document.getElementsByTagName('input').valueOf()[0].value);
********************************************************************************
JavaScript 这两个方法是有区别的:
document.getElementsByClassName('btn-default')[0].click();
document.getElementsByClassName('btn-default')[0].onclick() = = function(){ ...... };
click()---->单纯的点击,比如某个按钮
onclick---->绑定点击事件
********************************************************************************
onclick 和 addEventListener 的区别:
onclick不支持多次赋值,绑定的是最后一次点击事件
addEventListener 支持多次绑定,全部触发点击事件
    var  obj = document.getElementById('h1');

    // obj.onclick = function () {
    //     console.log('11111111111')
    // }
    // obj.onclick = function () {
    //     console.log('2222222222')
    // }

    //注册第一个点击事件 绑定点击事件
    obj.addEventListener("click",function(){
        console.log("11111111111");
    });
    //注册第二个点击事件
    obj.addEventListener("click",function(){
        console.log("22222222222222");
    });
********************************************************************************
  给每个class添加(绑定) 事件
    var  obj_list = document.getElementsByClassName('button');

    for (var i in obj_list){
        //注册第一个点击事件
        obj_list[i].addEventListener('click',function () {
            console.log('1111111111111')
        });
        //注册第二个点击事件
        obj_list[i].addEventListener("click",function(){
            console.log("-----------------------");
        });
    }

********************************************************************************
<html lang="zh-CN"> ==> 加上就不会自动翻译了
******************************************************************************** 
               //给class绑定事件一定要加上[0]		
 document.getElementsByClassName('btnn')[0].onclick = function() {
 	alert('btnnnnn');
 }
 
 //同样是调用函数,但是概念却完全不一样:
 document.getElementsByClassName('btnn')[0].onclick = aaa;   //点击才会调用
 document.getElementsByClassName('btnn2')[0].onclick = ccc();//不点击直接调用(类似于初始化)
 		
 ----------------------------------------------------------------------------------

 JavaScript:网页加载完,再去运行js代码:
 <script type="text/javascript">
    window.onload = function(){
            alert(2233333);
    }
</script>
 ----------------------------------------------------------------------------------
 一个html页面包含另外一个html页面:
 window.onload = function() {
 	$('.asasas').load('a.html');
 }
 ----------------------------------------------------------------------------------
 拿到 <textarea></textarea> 里面的文本数据:
 document.getElementById('tValue').value;
 ----------------------------------------------------------------------------------
 改变Dom的样式表:
 document.getElementsByClassName('div2')[0].style.background = 'pink';
 ----------------------------------------------------------------------------------
 
 history.go(-1); 返回上一页面
 
 ********************************************************************************

document.body    JavaScript获取body节点
比如 : document.body.style.background

 
 ********************************************************************************
  //  移动web禁止滑动 + 开启滑动
    // 首先，建立一个函数
    function bodyScroll(event){
        event.preventDefault();
    }

    // 禁止页面滚动
    function stop_rolling(){
        document.body.addEventListener('touchmove',bodyScroll,false);
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
	}

    // 开启页面滚动
    function start_rolling(){
        document.body.removeEventListener('touchmove',bodyScroll,false);
        document.body.style.position = 'static';
        document.body.style.width = 'auto';
    }
 
 ********************************************************************************

 移动端页面开发的两种方式
https://www.cnblogs.com/jasmine-95/p/7235186.html

********************************************************************************
JavaScript 在新标签页中打开链接URL
window.open(url, '_blank').location; 

PS:
<a href="链接的页面" target="_blank">新窗口打开</a><br />
<a href="链接的页面" target="_parent">原窗口打开</a>
********************************************************************************
 
********************************************************************************
 
********************************************************************************
 
********************************************************************************
 
********************************************************************************
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ---------------------------------------------------------------------------------- 
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ----------------------------------------------------------------------------------
 
 
 ---------------------------------------------------------------------------------- 
 
 
 ----------------------------------------------------------------------------------
 

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************

********************************************************************************
