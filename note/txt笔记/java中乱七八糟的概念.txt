java中乱七八糟的概念:
---------------------------------------------------
POJO、JAVABean、Entity(实体类)的区别:

JavaBean是特殊的Java类
JavaBean符合一定规范编写的Java类，不是一种技术，而是一种规范

    1 所有属性为private
    2 提供一个默认的无参构造函数  =>                        public StudentsBean() { }
    3 需要被序列化并且实现了 java.io.Serializable 接口   (  public class StudentsBean implements java.io.Serializable  )
    4 "getter"或"setter"方法 (布尔类型的属性最好使用 is/set 命名模式)

javaBean的近义词: 
    POJO :（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans
    实体类 ( Entity )


实体类:(我个人感觉类似于JavaBean)
    一、实体类的名字尽量和数据库的表的名字对应相同
    二、实体类应该实现java.io.Serializable接口。
    三、实体类应该有个无参的构造方法。
    四、实体类应该有个有参（所有的参数）的构造方法。
    五、实体类有属性和方法，属性对应数据库中表的字段，主要有getter和setter方法。
    六、实体类还应该有个属性serialVersionUID。例如：private static final long serialVersionUID = -6125297654796395674L;
    七、属性一般是private类型，方法位public类型

================================================================================


Dao 层 (一般是个interface接口):
    主要用来封装对DB（数据库）的访问（CRUD操作）
    也有人叫做dal或者数据持久层都差不多意思
package com.warframe.mytmall.dao;
@Repository
public interface UserDAO {
    @Override
    <T> void add(T t);

    @Override
    <T> List<T> list(@Param("start") int start, @Param("count") int count);

    //判段密码是否正确
    int checkPassword(@Param("name") String name,@Param("password") String password);

    User getByUserName(String userName);

================================================================================


controller层
    主要用于给前端返回数据的以及接收前端的数据的，
    如下:
    package org.sang.controller;

    @Controller
    @RequestMapping("/product")
    public class ArticleController {
        @RequestMapping("/")
        public String index(Model model) {
            model.addAttribute("articles", articles);
            return "views/index";
        }


================================================================================

service层
    一般还有个实现层 serviceImpl
    1.处理controller层传过来的数据然后传给给dao层链接数据库进行增删改查，
    2.从dao层传过来的数据的处理，比如封装成JavaBean
    代码示例:
    package org.sang.service;
    @Service
    public class ArticleService {

        public Article getArticleById(Long id) {
            Article article = articleDao.getArticleById(id);
            --- 这里写一些逻辑代码 ---
            return article;
        }

        public void writeBlog(Article article) {
            Long categoryId = articleDao.getCategoryIdByName(article.getCategory());
            article.setCategoryId(categoryId);
            --- 这里写一些逻辑代码 ---
            articleDao.writeBlog(article);
        }

        public void updateBlog(Article article) {
            article.setDate(sdf.format(new Date()));
            --- 这里写一些逻辑代码 ---
            articleDao.updateArticleById(article);
        }
    }





SSM基本架构:
========================================================
1 controller文件夹
------------------------------
2 dao文件夹
    一般是接口_interface
    举个例子:
    public interface UserDao{
        public void deleteUserById(Long id);
    }
------------------------------
3 pojo (bean 或者 entity)
    3.1 所有属性为private
    3.2 提供一个默认的无参构造函数  =>                        public StudentsBean() { }
    3.3 需要被序列化并且实现了 java.io.Serializable 接口   (  public class StudentsBean implements java.io.Serializable  )
    3.4 "getter"或"setter"方法 (布尔类型的属性最好使用 is/set 命名模式)

------------------------------
4 service文件夹:
    serviceImpl文件夹
        UserServiceImpl.java
    UserService.java (接口_interface)
------------------------------
5 resource文件夹
    5.1 mapper文件夹
            xxxMapper.xml
            xxxMapper.xml
    5.2 spring文件夹:
            springMVC.xml
            spring_mybatis.xml
    applicationContext.xml
    mybatis-config.xml
    jdbc.properties
    xxx.sql
------------------------------


SSM基本架构文件夹搭建: [规范,不是强制]
SSM_Demo [项目名_不解释]
    .idea
    src
        main
            java                -->  [设置称为 Source Root 文件夹]
                com.xxxxx [包名]
                	1 controller
                	2 mapper
                	3 dao  [interface 不一定要]
                	4 pojo [ entity/javaBean (implements java.io.Serializable) ]
                	5 service (接口_interface)
                		serviceImpl
            resource
            	mybatis [文件夹]
            	    mybatis-config.xml
                	jdbc.properties
                spring [文件夹]
                	springmvc.xml
                	log.xml
                	beans.xml
            webapp
            	...

------------------------------------------------------------------------------

SSM整合:
1. spring			容器, 提供一些服务(事务控制) 
	负责对象的创建 + 对象的依赖关系		---> 传说中的ioc容器
	对事务进行统一的控制
2. springMVC		mvc框架, 处理用户的请求, 并给出响应		 web层 对servlet的封装
3. mybatis			数据持久层的框架, 将数据保存到数据库中	 dao层 对jdbc的封装


------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





------------------------------------------------------------------------------





	


